= What we pass to you = 

	We will send a JSON document matching the following format:

	This is the high-level document
	{
		"ifp": {}, # the IFP document

		"payload": {
			"question_type": "Boolean", (one of "Boolean", "Multinomial", or "Ordered Multinomial" depending on the question type)
			"separations": SEPARATION_SPEC,
			"historical_data": DATA_SPEC,
			
		}	
	}

	SEPARATION_SPEC
		This will be a vector indicating the separations in an ordered multinomial IFP. The values with be real numbers with the exception of the first and last entry. The first entry has the possibility of having the value "-INF", indicating that the lower end is unbounded. The last entry has the possibility of being "INF", indicating that the upper end is unbounded. 
		For example, consider the IFP "What will be the daily closing price of gold on 27 December 2017 in USD?" Imagine it has the following options:
			Less than $1,200
			Between $1,200 and $1,230, inclusive
			More than $1,230 but less than $1,255
			Between $1,255 and $1,285, inclusive
			More than $1,285
		The resulting "separations" value will be 
		{
			"parsed_options": {
				"unit": "number",
				"values": [
					"<700000",
					"700000-800000",
					"800001-900000",
					"900001-1000000",
					">=1000001"
				]
			},
			"original_options": [
				"Less than $1,200"
				"Between $1,200 and $1,230, inclusive"
				"More than $1,230 but less than $1,255"
				"Between $1,255 and $1,285, inclusive"
				"More than $1,285"
			]
		}
		"Less than $1,200"
		"Between $1,200 and $1,230, inclusive"
		"More than $1,230 but less than $1,255"
		"Between $1,255 and $1,285, inclusive"
		"More than $1,285"
		["-INF", 1200, 1230, 1255, 1285, "INF"]

	DATA_SPEC
		We envision two possible data types: EVENTS, and TIMESERIES. These are defined separately.

	TIMESERIES
		This will be a JSON document containing 3 fields
		{
			"ts": [ (An array of arrays. Each sub-array is the time and the fields defined in the "dimensions" array.)
				["2017-12-21T00:40:36Z", 3],
				["2017-12-22T00:40:36Z", 0],
				...
			]
			"metadata": { (some relevant metadata about the time series.)
				"name": ...,
				"aggregation_type": ...,
				...
			}
			"dimensions": [ (A list of the dimensions in the time series. The first dimension will be a date.)
				"DATE",
				{
					"type": "int", (the datatype {float, int, string})
					"semantic_type": "deaths" (what the value represents)
				},
				...
			]
		}

		This holds for the binary and *ordered* multinomial cases as there is ultimately 1 value being forecast. For multinomial questions, "ts" will become a dictionary with each key being an option.
		
= Things checked for in incoming requests =

For making fake test requests...

- separations['values'] 
  - does not contain mixed commas and periods
  - does not contain multiple "<X" or ">X" elements
- historical_data['timeseries']
  - has exactly two columns
  - the first can be parsed as a date, e.g. something like 'YYYY-MM-DD' format
- the time period in the question, parsed from ifp['name'], matches the aggregation period implied by the date column/vector
- the input data do not exceed the time period in the question, unless called with "?backcast=True", in which case excess data are dropped and a forecast is returned (barring other issues)
  
# What you will return 

A JSON object structured like below. The first part is what we have been using currently (23 March 2018), with the addition of a "model" key-value pair. Tacked on to that is essentially another JSON array with the key "forecasts", and which contains FORECAST objects that are structured like the basic response with "ts", and "option_probabilities", etc. This would contain forecasts from all models, including a copy of the one that is in the top level of the request. 

{
  "model": "ARIMA"
  "forecast_is_usable": 0 | 1  # i'll fix this so it's not an array anymore, 
  "option_probabilities": [0.2636, 0.1955, 0.1668, 0.1766, 0.1975], 
  "ts": [
    ["2018-03-01", "2596.929", "746.7041", "4447.153"], 
    ["2018-04-01", "2596.929", "746.7041", "4447.153"]
  ], 
  "ts_colnames": ["date", "actual_forecast", "lower_bound_95_percent", 
                  "upper_bound_95_percent"],
  "internal": {}  # internal information for debugging
  
  # for down the road, i could take the above out of the top level and replace 
  # it with a key value pair pointing to the best model in "forecasts", e.g.
  # "best_model": "ETS",
  # OR,
  # I could just drop in whatever the best model is instead. 
  
  "internal2": {} # other internal info
  "forecasts": [FORECAST, FORECAST]  # an array of FORECAST objects, see below
}

FORECAST is a JSON object with the same structure as the responses so far:

{
  "model": "ARIMA"
  "forecast_is_usable": 0 | 1  
  "option_probabilities": [0.2636, 0.1955, 0.1668, 0.1766, 0.1975], 
  "ts": [
    ["2018-03-01", "2596.929", "746.7041", "4447.153"], 
    ["2018-04-01", "2596.929", "746.7041", "4447.153"]
  ], 
  "ts_colnames": ["date", "actual_forecast", "lower_bound_95_percent", 
                  "upper_bound_95_percent"],
  "internal": {}
}
